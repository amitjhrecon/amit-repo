namespace: monitoring

storageClass:
  name: gp2
  provisioner: kubernetes.io/aws-ebs

alertmanager:
  enabled: true
  replicas: 2
  image: prom/alertmanager:v0.20.0
  service:
    type: ClusterIP

grafana:
  enabled: false
  image: grafana/grafana
  service:
    type: ClusterIP
  storage: 10Gi

kube_state_metrics:
  enabled: true
  image: quay.io/coreos/kube-state-metrics:v1.9.5

nodeExporter:
  enabled: false
  image: prom/node-exporter:v0.18.1

prometheus:
  enabled: true
  image: prom/prometheus:v2.14.0
  clusterName: prometheus-ha
  replicas: 3
  storage: 1000Gi
  retentiontime: 49d
  extraArgs:
    web.external-url: http://thanos-query.abc.com/   #change with thanos url
  resources:
    limits:
      cpu: "4"
      memory: 6Gi
    requests:
      cpu: 100m
      memory: 1Gi
  rules:
    default:
      prometheus-rules:
        file: alert-rules/prometheus-rules.yaml
      linux-rules:
        file: alert-rules/linux-rules.yaml


pushgateway:
  enabled: false
  image: prom/pushgateway:v1.0.1
  replicas: 1
  service:
    type: ClusterIP

thanos:
  archive_bucket: prometheus-ha-thanos-s3-bucket #replace with your bucket name
  endpoint: s3.amazonaws.com
  region: ap-northeast-1
  image: quay.io/thanos/thanos:v0.13.0

  query:
    enabled: true
    replicas: 2
    # Other Query or Store Endpoints which need to be stacked should be specified here.
    extraArgs: {}
    #  store: <IP>:<PORT>
    resources:
      limits:
        cpu: "4"
        memory: 6Gi
      requests:
        cpu: 100m
        memory: 256Mi
    service:
      type: ClusterIP
    scrape:
      enabled: false
      type: LoadBalancer
      loadBalancerSourceRanges: ["10.11.0.0/20"]
      annotations:
        service.beta.kubernetes.io/aws-load-balancer-internal: 0.0.0.0/0

  compactor:
    enabled: true
    replicas: 1
    resources:
      limits:
        cpu: "1"
        memory: 1Gi
      requests:
        cpu: 100m
        memory: 256Mi

  store:
    enabled: true
    replicas: 1
    resources:
      limits:
        cpu: 1
        memory: 4Gi
      requests:
        cpu: 0.5
        memory: 1Gi

  ruler:
    enabled: true
    replicas: 1
    rules_bucket: prometheus-ha-thanos-ruler
    service:
      type: ClusterIP
    resources:
      limits:
        cpu: "1"
        memory: 1Gi
      requests:
        cpu: 50m
        memory: 100Mi

serviceAccount:
  create: true
  serviceAccountAnnotations: {
     eks.amazonaws.com/role-arn: arn:aws:iam::ACCOUNT_NUMBER:role/prometheus-ha-thanos
}



ingress:
  enabled: true
  annotations:
    kubernetes.io/ingress.class: nginx-prometheus
    nginx.ingress.kubernetes.io/whitelist-source-range: "10.11.0.0/20"
  rules:
    "0":
      name: monitoring-alertmanager-ingress
      host: alertmanager.abc.com
      path: /
      service_name: alertmanager
      service_port: 9093
    "1":
      name: monitoring-query-ingress
      host: thanos-query.abc.com
      path: /
      service_name: thanos-querier
      service_port: 9090
    "2":
      name: monitoring-ruler-ingress
      host: thanos-ruler.abc.com
      path: /
      service_name: thanos-ruler
      service_port: 9090

 
